########################################################################################
#@author: David BLACK    GH @bballdave025
#@since: ... Probably around 2017 is when I started using pieces of what became
#            these functions
#@brief(ly) I'll say that I hope this helps you, Sergei

##  In some flavors of Linux and with some programs - I imagine it works in a
##+ variety of Linux situations - you can use [Ctrl] + [Shift] + [u] (after
##+ which you will probably see an underlined 'u' character flashing. Enter
##+ the hex representation of the Unicode codepoint, then press [Enter]. The
##+ character will be there if the behavior is supported.
##
## If you are on Windows and need similar functionality, you can open

##+ These functions are alternatives, and they give more operations.

##  This can be added to `~/.bashrc`, or to a `~/.bash_functions` sourced by
##+ `~/.bashrc`, of you can call them from a filter with functions just like any
##+ other file with functions in the shell. For `bash`, that would mean
##+   $ source whatever_you_call_this_file
##+ Then use whichever function you would like.
##
##  I think that putting it in `~/.bashrc` is the easiest and best way to use
##+ If you want to use it right after copy/pasting it to your `~/.bashrc` and
##+ saving it, use
##+  $ source ~/.bashrc
##

#  To learn a little about the use and see some examples, run the following from
#+ the terminal prompt
#
# $ gethex4char --help
#
# $ getbinary4char --help
#
##  I was just reminded that `getunicode4char` only works for 2-byte Unicode
##+ codepoints, e.g. `getunicode4char "\u3398"` works but
##+ `getunicode4char "\U1fa6c"` does not work. I highly doubt you'll
##+ need more than 2-byte Unicode codepoints tomorrow. If so, try the
##+ [Ctrl]+[Shift]+[u] trick. -DWB 2023-03-21
# $ getunicode4char --help
#
# $ getbytes4unicode --help
#

#####################################
# Encoding stuff
#####################################
##DWB: get the hex value for a character's bytes
##@author: David Wallace BLACK
gethex4char()
{
  if [ "$@" = "-h" -o "$@" = "--help" ]; then
    echo "Help for gethex4char:"
    echo
    echo "Get the hex value for the bytes representing the"
    echo "character given as input."
    echo
    echo "Usage:"
    echo "% gethex4char <string-with-one-character>"
    echo
    echo "Examples:"
    echo "% gethex4char <string-with-one-character>"
    echo
    echo "Note that you might have to copy/paste the glyph of the"
    echo "character into some type of programmer's notebook with"
    echo "the encoding set as you want it (I want UTF-8)"
    echo "Then, in the notebook, write in the"
    echo "gethex4char part as well as the quotes around the character."
    echo
    echo "It will be easier (less backslash escapes) if you use single"
    echo "quotes around the character you pass in. The only exceptions"
    echo "(for ascii, at least), are the single quote and the percent"
    echo "sign. I fixed the percent sign, DWB 2022-02-16."
    echo "For the single quotes, use:"
    echo "% gethex4char \"'\""
    echo
    echo "If you really want to use double quotes, watch out for the"
    echo "following, which will not allow the program to continue -"
    echo "i.e. they will break the program."
    echo "--BAD)% gethex4char \"\\\""
    echo " instead, use single quotes or"
    echo " GOOD)% gethex4char \"\\\\\""
    echo "--BAD)% gethex4char \"\`\""
    echo " instead, use single quotes or"
    echo " GOOD)% gethex4char \"\\\`\""
    echo "--BAD)% gethex4char \"\"\""
    echo " instead, use single quotes or"
    echo " GOOD)% gethex4char \"\\\"\""
    echo
    echo "A few examples with the full input and output"
    echo "% gethex4char 'v'"
    echo "0x76"
    echo "% gethex4char v"
    echo "0x76"
    echo "% gethex4char 'œÄ'"
    echo "0xcf 0x80"
    echo "% gethex4char '≈Ç'"
    echo "0xc5 0x82"
    echo "% gethex4char '–ñ'"
    echo "0xd0 0x96"
    echo "% gethex4char '—£'"
    echo "0xd1 0xa3"
    echo "% gethex4char 'ÍôÆ'"
    echo "0xea 0x99 0xae"
    echo "% gethex4char '—¶'"
    echo "0xd1 0xa6"
    echo "% gethex4char '‚Ç™'"
    echo "0xe2 0x82 0xaa"
    echo "% gethex4char 'ÿ¥'"
    echo "0xd8 0xb4"
    echo "% gethex4char '‡πõ'"
    echo "0xe0 0xb9 0x9b"
    echo "% gethex4char '‡∏è'"
    echo "0xe0 0xb8 0x8f"
    echo "% gethex4char 'Ïïà'"
    echo "0xec 0x95 0x88"
    echo "% gethex4char 'ÂÆ∂'"
    echo "0xe5 0xae 0xb6"
    echo "% gethex4char 'Ë≠ú'"
    echo "0xe8 0xad 0x9c"
    echo "% gethex4char ÂÆ∂"
    echo "0xe5 0xae 0xb6"
    echo "% gethex4char Ë≠ú"
    echo "0xe8 0xad 0x9c"
    echo "% gethex4char êôÉ"
    echo "0xf0 0x90 0x99 0x83"
    echo "% gethex4char \\U16403"
    echo "0x55 0x31 0x36 0x34 0x30 0x33"
    echo "% gethex4char \\U1FA6C"
    echo "0x55 0x31 0x46 0x41 0x36 0x43"
    echo "% gethex4char \\u2328"
    echo "0x75 0x32 0x33 0x32 0x38"
    echo "% gethex4char 4"
    echo "0x34"d
  elif [ "$@" = "'" ]; then
    echo "0x22"
  elif [ "$@" = "\"" ]; then
    echo "0x28"
  elif [ "$@" = "\\" ]; then
    echo "0x5c"
  elif [ "$@" = "%" ]; then
    echo "0x25"
  else
    printf $@ | hexdump -C | head -n 1 | \
     awk '{$1=""; $NF=""; print $0}' | \
     sed 's#^[ ]\(.*\)[ ]\+$#0x\1#g; s#[ ]# 0x#g;'
  fi
  return 0
} ##endof:  gethex4char()


##DWB: get the binary value for a character's bytes
getbinary4char()
{
  hex_str="00"
  if [ "$@" = "-h" -o "$@" = "--help" ]; then
    echo "Help for getbinary4char:"
    echo
    echo "Get the binary value for the bytes representing the"
    echo "character given as input."
    echo
    echo "Usage:"
    echo "% getbinary4char <string-with-one-character>"
    echo
    echo "Examples:"
    echo "% getbinary4char <string-with-one-character>"
    echo
    echo "Note that you might have to copy/paste the glyph of the"
    echo "character into some type of programmer's notebook with"
    echo "the encoding set as you want it (I want UTF-8)"
    echo "Then, in the notebook, write in the"
    echo "gethex4char part as well as the quotes around the character."
    echo
    echo "It will be easier (less backslash escapes) if you use single"
    echo "quotes around the character you pass in. The only exception"
    echo "(for ascii, at least), is the single quote. For that, use:"
    echo "% getbinary4char \"'\""
    echo
    echo "If you really want to use double quotes, watch out for the"
    echo "following, which will not allow the program to continue -"
    echo "i.e. they will break the program."
    echo "--BAD)% getbinary4char \"\\\""
    echo " instead, use single quotes or"
    echo " GOOD)% getbinary4char \"\\\\\""
    echo "--BAD)% getbinary4char \"\`\""
    echo " instead, use single quotes or"
    echo " GOOD)% getbinary4char \"\\\`\""
    echo "--BAD)% getbinary4char \"\"\""
    echo " instead, use single quotes or"
    echo " GOOD)% getbinary4char \"\\\"\""
    echo
    echo "A few examples with the full input and output"
    echo "% getbinary4char 'v'"
    echo "01110110"
    echo "% getbinary4char v"
    echo "01110110"
    echo "% getbinary4char 'œÄ'"
    echo "1100111110000000"
    echo "% getbinary4char '≈Ç'"
    echo "1100010110000010"
    echo "% getbinary4char '–ñ'"
    echo "1101000010010110"
    echo "% getbinary4char '—£'"
    echo "1101000110100011"
    echo "% getbinary4char 'ÍôÆ'"
    echo "111010101001100110101110"
    echo "% getbinary4char '—¶'"
    echo "1101000110100110"
    echo "% getbinary4char '‚Ç™'"
    echo "111000101000001010101010"
    echo "% getbinary4char 'ÿ¥'"
    echo "1101100010110100"
    echo "% getbinary4char '‡πõ'"
    echo "111000001011100110011011"
    echo "% getbinary4char '‡∏è'"
    echo "111000001011100010001111"
    echo "% getbinary4char 'Ïïà'"
    echo "111011001001010110001000"
    echo "% getbinary4char 'ÂÆ∂'"
    echo "111001011010111010110110"
    echo "% getbinary4char 'Ë≠ú'"
    echo "111010001010110110011100"
    echo "% getbinary4char ÂÆ∂"
    echo "111001011010111010110110"
    echo "% getbinary4char Ë≠ú"
    echo "111010001010110110011100"
    echo "% getbinary4char êôÉ"
    echo "11110000100100001001100110000011"
    echo "% getbinary4char \\U16403"
    echo "010101010011000100110110001101000011000000110011"
    echo "% getbinary4char \\U1FA6C"
    echo "010101010011000101000110010000010011011001000011"
    echo "% getbinary4char \\u2328"
    echo "0111010100110010001100110011001000111000"
    echo "% getbinary4char 4"
    echo "00110100"
  elif [ "$@" = "'" ]; then
    hex_str="22"
  elif [ "$@" = "\"" ]; then
    hex_str="28"
  elif [ "$@" = "\\" ]; then
    hex_str="5c"
  else
    hex_str=$(printf $@ | hexdump -C | head -n 1 | \
     awk '{$1=""; $NF=""; print $0}' | \
     sed 's#^[ ]\+$##g;' | tr 'a-f' 'A-F')
  fi
  while [ $(echo "${#hex_str} % 4" | bc) -ne 0 ]; do
    hex_str="0${hex_str}"
  done
  bin_str=$(echo "obase=2; ibase=16; ${hex_str}" | bc)
  while [ $(echo "${#bin_str} % 8" | bc) -ne 0 ]; do
    bin_str="0${bin_str}"
  done
  echo "0b${bin_str}"
  return 0
} ##endof:  getbinary4char()


##DWB: get the Unicode codepoint (as hex) for a character
getunicode4char()
{
  if [ "$@" = "-h" -o "$@" = "--help" ] 2>/dev/null; then
    echo "Help for getunicode4char:"
    echo
    echo "Get the binary value for the bytes representing the"
    echo "character given as input."
    echo
    echo "Requires: python3 for now, till I get the hexdump -C stuff finished"
    echo "It was originally built with Python 3 in mind, but it works"
    echo "without that, thanks to hexdump -C"
    echo "You'll still need to watch out for the problem strings"
    echo "methioned below."
    echo
    echo "Usage:"
    echo "% getunicode4char <string-with-one-character>"
    echo
    echo "Examples:"
    echo "% getunicode4char <string-with-one-character>"
    echo
    echo "Note that you might have to copy/paste the glyph of the"
    echo "character into some type of programmer's notebook with"
    echo "the encoding set as you want it (I want UTF-8)"
    echo "Then, in the notebook, write in the"
    echo "getunicode4char part as well as the quotes around the character."
    echo
    echo "It will be easier (less backslash escapes) if you use single"
    echo "quotes around the character you pass in. The only exception"
    echo "(for ascii, at least), is the single quote. For that, use:"
    echo "% getunicode4char \"'\""
    echo
    echo "If you really want to use double quotes, watch out for the"
    echo "following, which will not allow the program to continue -"
    echo "i.e. they will break the program."
    echo "--BAD)% getunicode4char \"\\\""
    echo " instead, use single quotes or"
    echo " GOOD)% getunicode4char \"\\\\\""
    echo "--BAD)% getunicode4char \"\`\""
    echo " instead, use single quotes or"
    echo " GOOD)% getunicode4char \"\\\`\""
    echo "--BAD)% getunicode4char \"\"\""
    echo " instead, use single quotes or"
    echo " GOOD)% getunicode4char \"\\\"\""
    echo
    echo "A few examples with the full input and output"
    echo "% getunicode4char 'v'
    echo "U+0076
    echo "% getunicode4char v
    echo "U+0076
    echo "% getunicode4char 'œÄ'
    echo "U+03c0
    echo "% getunicode4char '≈Ç'
    echo "U+0142
    echo "% getunicode4char '–ñ'
    echo "U+0416
    echo "% getunicode4char '—£'
    echo "U+0463
    echo "% getunicode4char 'ÍôÆ'
    echo "U+a66e
    echo "% getunicode4char '—¶'
    echo "U+0466
    echo "% getunicode4char '‚Ç™'
    echo "U+20aa
    echo "% getunicode4char 'ÿ¥'
    echo "U+0634
    echo "% getunicode4char '‡πõ'
    echo "U+0e5b
    echo "% getunicode4char '‡∏è'
    echo "U+0e0f
    echo "% getunicode4char 'Ïïà'
    echo "U+c548
    echo "% getunicode4char 'ÂÆ∂'
    echo "U+5bb6
    echo "% getunicode4char 'Ë≠ú'
    echo "U+8b5c
    echo "% getunicode4char ÂÆ∂
    echo "U+5bb6
    echo "% getunicode4char Ë≠ú
    echo "U+8b5c
    echo "% getunicode4char êôÉ
    echo "U+10643
    echo "% getunicode4char \U16403
    echo "Traceback (most recent call last):
    echo "  File "<string>", line 1, in <module>
    echo "TypeError: ord() expected a character, but string of length 6 found
    echo "U+0000
    echo "% getunicode4char \U1FA6C
    echo "Traceback (most recent call last):
    echo "  File "<string>", line 1, in <module>
    echo "TypeError: ord() expected a character, but string of length 6 found
    echo "U+0000
    echo "% getunicode4char \u2328
    echo "Traceback (most recent call last):
    echo "  File "<string>", line 1, in <module>
    echo "TypeError: ord() expected a character, but string of length 5 found
    echo "U+0000
    echo "% getunicode4char 4
    echo "U+0034
  elif [ "$@" = "'" ]; then
    echo "U+0022"
  elif [ "$@" = "\"" ]; then
    echo "U+0028"
  elif [ "$@" = "\\" ]; then
    echo "U+005C"
  else
    python3_is_installed=0
    command -v python3 >/dev/null 2>&1 && python3_is_installed=1
    if [ $python3_is_installed -eq 1 ]; then
      zeroX_str=$(python3 -c 'print(hex(ord('"'$@'"')))')
      hex_only_str=$(echo "${zeroX_str}" | sed 's#0x##g')
      while [ ${#hex_only_str} -lt 4 ]; do
        hex_only_str="0${hex_only_str}"
      done ##endof:  while [ ${#hex_only_str} -lt 4 ]
      echo "U+${hex_only_str}"
      # Only returns unicode codepoints
    else
      echo "won't work for now. need python3"
      return -1
      #printf $@ | hexdump -C | head -n 1 | \
      # awk '{$1=""; $NF=""; print $0}' | \
      # sed 's#^[ ]\(.*\)[ ]\+$#0x\1#g; s#[ ]# 0x#g;'
    fi
  fi
  return 0
} ##endof:  getunicode4char()


## DWB
getbytes4unicode()
{
  if [ "$@" = "-h" -o "$@" = "--help" ]; then
    echo "Help for getbytes4unicode:"
    echo
    echo "Get the hex value for the bytes representing the"
    echo "character given as a unicode codepoint input."
    echo
    echo "Usage:"
    echo "% getbytes4unicode <string-with-only-hex-from-unicode-codepoint>"
    echo
    echo "Examples:"
    echo "% getbytes4unicode <string-with-only-hex-from-unicode-codepoint>"
    #@TODO: Put in some examples
    echo
    echo "Make sure you only include the hex digits of the Unicode codepoint"
    echo "--BAD)% getbytes4unicode \"U+4d\""
    echo "--BAD)% getbytes4unicode \"U+004d\""
    echo "--BAD)% getbytes4unicode \"#004d\""
    echo "--BAD)% getbytes4unicode \"\\x4d\""
    echo "#-----QUITE_BAD) Not Unicode Codepoint"
    echo "--BAD)% getbytes4unicode \"\\u4d\""
    echo "--BAD)% getbytes4unicode \"\\u004d\""
    echo "--BAD)% getbytes4unicode \"\\U004d\""
    echo "--BAD)% getbytes4unicode \"\\U0000004d\""
    echo " Leave off that leading stuff. Also note"
    echo " GOOD)% getbytes4unicode \"4d\""
    echo "Also note that you don't need to worry about the case in the hex"
    echo "as I hope the examples below will illustrate."
    echo " GOOD)% getbytes4unicode \"4D\""
    echo " GOOD)% getbytes4unicode \"4d\""
    echo " GOOD)% getbytes4unicode \"2A2b\""
    echo "You can include leading zeros or not, but make sure that you don't"
    echo "end up using more than eight hex digits."
    echo " GOOD)% getbytes4unicode \"04D\""
    echo " GOOD)% getbytes4unicode \"04D\""
    echo " GOOD)% getbytes4unicode \"0000004D\""
    echo "--BAD)% getbytes4unicode \"000000004D\""
    echo " GOOD)% getbytes4unicode \"01D10B\""
    echo "--BAD)% getbytes4unicode \"1B8A4D1F3\""
    echo
    echo "A few examples with the full input and output"
    echo "% getbytes4unicode '4D'"
    echo "% getbytes4unicode 4d"
    echo "% getbytes4unicode '0001D10B'"
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
    echo "% getbytes4unicode "
  else
    codepoint_str="$@"
    to_print_str="\\U${codepoint_str}"
    while [ $(echo "${#cpdepoint_str} % 4" | bc) -ne 0 ]; do
      codepoint_str="0${codepoint_str}"
    done ##endof:  while [ $(echo "${#codepoint_str} % 4" | bc) -ne 0 ]
    if [ ${#codepoint_str} -eq 4 ]; then
      to_print_str="\\u${codepoint_str}"
    elif [ ${#codepoint_str} -eq 8 ]; then
      to_print_str="\\U${codepoint_str}"
    else
      echo "A maximum of 8 hex digits is allowed."
    fi
    printf "${to_print_str}" | hexdump -C | head -n 1 | \
            awk '{$1=""; $NF=""; print $0}' | \
            sed 's#^[ ]\(.*\)[ ]\+$#0x\1#g; s#[ ]# 0x#g;'
  fi
  return 0
} ##endof:  getbytes4unicode()
